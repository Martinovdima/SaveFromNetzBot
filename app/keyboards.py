from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from rest import EMOJIS
import emoji

find_yt_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –Ω–∞ YouTube", switch_inline_query_current_chat="")]
])


def all_videos_channel(id_channel):
    return InlineKeyboardMarkup(inline_keyboard=[
        #[InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subcribe")],
        [InlineKeyboardButton(text="üîç –í—Å–µ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞", switch_inline_query_current_chat=f"channel_id_{id_channel}")]
    ])


async def main_kb(filtered_formats, audio_id, audio_size, video) -> InlineKeyboardMarkup:
    button_list = []
    audio_full_size = f'{round(audio_size / (1024 ** 2), 2)} MB'
    button_list.append([InlineKeyboardButton(
        text=f" C–∫–∞—á–∞—Ç—å {emoji.emojize(EMOJIS['sound'])} –∞—É–¥–∏–æ {emoji.emojize(EMOJIS['size'])} {audio_full_size}",
        callback_data=f"yt_audio:{audio_id}:{audio_full_size}:{video}")])

    for f in filtered_formats:
        format_id = f['format_id']
        if format_id:
            callback_data = f"yt_video:{f['format_id']}:{f['filesize']}:{video}"
            button_list.append([InlineKeyboardButton(
                text=f" C–∫–∞—á–∞—Ç—å {emoji.emojize(EMOJIS['resolutions'])} {f['resolution']:<10} {emoji.emojize(EMOJIS['size'])}  {f['filesize']:<10}",
                callback_data=callback_data)])

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=button_list)
    return keyboard


async def make_keyboard_vk(formats_dict, duration):
    """
        –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –∏–∑ VK.

        Args:
            formats_dict (dict[int, list]): –°–ª–æ–≤–∞—Ä—å —Ñ–æ—Ä–º–∞—Ç–æ–≤, –≥–¥–µ –∫–ª—é—á ‚Äî –Ω–æ–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞,
                                            –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–ø–∏—Å–æ–∫ —Å –æ–¥–Ω–∏–º —Å–ª–æ–≤–∞—Ä–µ–º (—Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ).
            duration (int | None): –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ.

        Returns:
            InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏.
        """
    button_list = []

    for num, format_list in formats_dict.items():
        f = format_list[0]  # –î–æ—Å—Ç–∞—ë–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞

        resolution_text = "–ê—É–¥–∏–æ" if f.get(
            "width") is None else f"{f.get('width', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}x{f.get('height', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ 'tbr' –∏ 'duration'
        if 'tbr' in f and isinstance(f['tbr'], (int, float)) and duration:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = (f['tbr'] * duration) / (8 * 1024)  # –≤ –ú–ë
            size_text = f"{round(file_size, 2)} MB"
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≤—ã–≤–æ–¥–∏–º "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            size_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø callback
        callback_type = "vk_audio" if resolution_text == "–ê—É–¥–∏–æ" else "vk_video"

        button_list.append([
            InlineKeyboardButton(
                text=f"–°–∫–∞—á–∞—Ç—å {emoji.emojize(EMOJIS['sound'] if resolution_text == '–ê—É–¥–∏–æ' else EMOJIS['resolutions'])} {resolution_text} {emoji.emojize(EMOJIS['size'])} {size_text}",
                callback_data=f"{callback_type}:{num}:{size_text}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
            )
        ])

    return InlineKeyboardMarkup(inline_keyboard=button_list)


async def main_kb_tt(formats):
    button_list = []

    for f in formats:
        button_list.append([InlineKeyboardButton(
            text=f" C–∫–∞—á–∞—Ç—å {emoji.emojize(EMOJIS['resolutions'])} {f['resolution']} {emoji.emojize(EMOJIS['size'])}  {f['size']}",
            callback_data=f"tt_download:{f['id']}:{f['size']}")])

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=button_list)
    return keyboard
